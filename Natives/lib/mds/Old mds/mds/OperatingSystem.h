/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class OperatingSystem */

#ifndef _Included_OperatingSystem
#define _Included_OperatingSystem
#ifdef __cplusplus
extern "C" {
#endif
#undef OperatingSystem_DRIVE_UNKNOWN
#define OperatingSystem_DRIVE_UNKNOWN 10L
#undef OperatingSystem_DRIVE_NO_ROOT_DIR
#define OperatingSystem_DRIVE_NO_ROOT_DIR 20L
#undef OperatingSystem_DRIVE_REMOVABLE
#define OperatingSystem_DRIVE_REMOVABLE 30L
#undef OperatingSystem_DRIVE_FIXED
#define OperatingSystem_DRIVE_FIXED 40L
#undef OperatingSystem_DRIVE_REMOTE
#define OperatingSystem_DRIVE_REMOTE 50L
#undef OperatingSystem_DRIVE_CDROM
#define OperatingSystem_DRIVE_CDROM 60L
#undef OperatingSystem_DRIVE_RAMDISK
#define OperatingSystem_DRIVE_RAMDISK 70L
#undef OperatingSystem_UNRECOGNIZED_DRIVE
#define OperatingSystem_UNRECOGNIZED_DRIVE 80L
/*
 * Class:     OperatingSystem
 * Method:    createMutex
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OperatingSystem_createMutex
  (JNIEnv *, jobject, jstring);

/*
 * Class:     OperatingSystem
 * Method:    getDriveType
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_OperatingSystem_getDriveType
  (JNIEnv *, jobject, jstring);

/*
 * Class:     OperatingSystem
 * Method:    getVolumeName
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_OperatingSystem_getVolumeName
  (JNIEnv *, jobject, jstring);

/*
 * Class:     OperatingSystem
 * Method:    getFileSystemName
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_OperatingSystem_getFileSystemName
  (JNIEnv *, jobject, jstring);

/*
 * Class:     OperatingSystem
 * Method:    setDriveVolumeLabel
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OperatingSystem_setDriveVolumeLabel
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     OperatingSystem
 * Method:    setHighPriorityClass
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_OperatingSystem_setHighPriorityClass
  (JNIEnv *, jobject);

/*
 * Class:     OperatingSystem
 * Method:    createProcess
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_OperatingSystem_createProcess__Ljava_lang_String_2
  (JNIEnv *, jobject, jstring);

/*
 * Class:     OperatingSystem
 * Method:    createProcess
 * Signature: (Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_OperatingSystem_createProcess__Ljava_lang_String_2Ljava_lang_String_2ZLjava_lang_String_2
  (JNIEnv *, jobject, jstring, jstring, jboolean, jstring);

/*
 * Class:     OperatingSystem
 * Method:    terminateProcess
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_OperatingSystem_terminateProcess
  (JNIEnv *, jobject, jlong);

/*
 * Class:     OperatingSystem
 * Method:    allocateConsole
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_OperatingSystem_allocateConsole
  (JNIEnv *, jobject);

/*
 * Class:     OperatingSystem
 * Method:    showWindow
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OperatingSystem_showWindow
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     OperatingSystem
 * Method:    setWindowsHookForBaseWindow
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_OperatingSystem_setWindowsHookForBaseWindow
  (JNIEnv *, jobject);

/*
 * Class:     OperatingSystem
 * Method:    unHookWindowsHookForBaseWindow
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_OperatingSystem_unHookWindowsHookForBaseWindow
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
