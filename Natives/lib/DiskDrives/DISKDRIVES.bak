/*
 * Title:        MDS
 * Description:  New Desktop Environment for Windows
 * Author:       Mahesh Dharmasena
 * Version:      1.0
 */

 
#include <jni.h>
#include <stdio.h>
#include <windows.h>
#include "DiskDrives.h"
#include "nativeexception.h"

extern "C"



void ThrowException(JNIEnv* env);



JNIEXPORT jint JNICALL Java_DiskDrives_getDriveType (JNIEnv* env, jobject, jstring jDrive) {

    const char* msg=env->GetStringUTFChars(jDrive,0);

    long storeDriveType=0;

    switch (GetDriveType(msg)) {
        case DRIVE_UNKNOWN:
            storeDriveType=10;
            break;
        case DRIVE_NO_ROOT_DIR:
            storeDriveType=20;
            break;
        case DRIVE_REMOVABLE:
            storeDriveType=30;
            break;
        case DRIVE_FIXED:
            storeDriveType=40;
            break;
        case DRIVE_REMOTE:
            storeDriveType=50;
            break;
        case DRIVE_CDROM:
            storeDriveType=60;
            break;
        case DRIVE_RAMDISK:
            storeDriveType=70;
            break;
        default:
            storeDriveType=80;
            break;
    }

    env->ReleaseStringUTFChars(jDrive, msg);

    return storeDriveType;

}



JNIEXPORT jstring JNICALL Java_DiskDrives_getDriveVolumeLabel (JNIEnv* env, jobject, jstring jDrive) {

    const char* msg=env->GetStringUTFChars(jDrive,0);

    jstring jstrDriveVolumeLabel;

    char  szVolName[MAX_PATH];
    char  szFileSysName[80];
    DWORD dwSerialNumber;
    DWORD dwMaxComponentLen;
    DWORD dwFileSysFlags;

    if(GetVolumeInformation(msg, szVolName, MAX_PATH, &dwSerialNumber, &dwMaxComponentLen, &dwFileSysFlags, szFileSysName, 80) == FALSE) {
        jstrDriveVolumeLabel = env->NewStringUTF("");
    } else {
        jstrDriveVolumeLabel = env->NewStringUTF(szVolName);
    }

    env->ReleaseStringUTFChars(jDrive, msg);

    Printkn();


    return jstrDriveVolumeLabel;

}



JNIEXPORT jstring JNICALL Java_DiskDrives_getFileSystem (JNIEnv* env, jobject, jstring jDrive) {

    const char* msg=env->GetStringUTFChars(jDrive,0);

    jstring jstrDriveFileSystem;

    char  szVolName[MAX_PATH];
    char  szFileSysName[80];
    DWORD dwSerialNumber;
    DWORD dwMaxComponentLen;
    DWORD dwFileSysFlags;

    if(GetVolumeInformation(msg, szVolName, MAX_PATH, &dwSerialNumber, &dwMaxComponentLen, &dwFileSysFlags, szFileSysName, 80) == FALSE) {
        jstrDriveFileSystem = env->NewStringUTF("");
    } else {
        jstrDriveFileSystem = env->NewStringUTF(szFileSysName);
    }

    env->ReleaseStringUTFChars(jDrive, msg);

    return jstrDriveFileSystem;

}



JNIEXPORT jlong JNICALL Java_DiskDrives_getDiskFreeSpace(JNIEnv* env, jobject, jstring jDrive) {
    const char* drive=env->GetStringUTFChars(jDrive,0);
    ULARGE_INTEGER  ulTotalSpace;
    ULARGE_INTEGER  ulUserSpace;
    ULARGE_INTEGER  ulFreeSpace;

    if(GetDiskFreeSpaceEx(drive, &ulUserSpace, &ulTotalSpace, &ulFreeSpace) == FALSE){
        return 0;
    } else {
        return ulFreeSpace.QuadPart;
    }

}



JNIEXPORT jlong JNICALL Java_DiskDrives_getDiskTotalSpace(JNIEnv* env, jobject, jstring jDrive) {
    const char* drive=env->GetStringUTFChars(jDrive,0);
    ULARGE_INTEGER  ulTotalSpace;
    ULARGE_INTEGER  ulUserSpace;
    ULARGE_INTEGER  ulFreeSpace;

    if(GetDiskFreeSpaceEx(drive, &ulUserSpace, &ulTotalSpace, &ulFreeSpace) == FALSE){
        return 0;
    } else {
        return ulTotalSpace.QuadPart;
    }

}



JNIEXPORT jlong JNICALL Java_DiskDrives_getDiskTotalUserSpace(JNIEnv* env, jobject, jstring jDrive) {
    const char* drive=env->GetStringUTFChars(jDrive,0);
    ULARGE_INTEGER  ulTotalSpace;
    ULARGE_INTEGER  ulUserSpace;
    ULARGE_INTEGER  ulFreeSpace;

    if(GetDiskFreeSpaceEx(drive, &ulUserSpace, &ulTotalSpace, &ulFreeSpace) == FALSE){
        return 0;
    } else {
        return ulUserSpace.QuadPart;
    }

}



JNIEXPORT void JNICALL Java_DiskDrives_setDriveVolumeLabel(JNIEnv* env, jobject, jstring jDrive, jstring jLabel) {
    const char* drive=env->GetStringUTFChars(jDrive,0);
    const char* label=env->GetStringUTFChars(jLabel,0);
    if(SetVolumeLabel(drive, label) == FALSE) {
        ThrowException(env);
    }
}



JNIEXPORT jlong JNICALL Java_DiskDrives_getValidationCode(JNIEnv*, jobject) {
    return 632176;
}



void ThrowException(JNIEnv* env) {
    LPVOID lpMsgBuf;
    FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
                  NULL, GetLastError(), MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPTSTR) &lpMsgBuf, 0,
                  NULL );
    //env->ThrowNew(env->FindClass("java/lang/RuntimeException"), (LPCTSTR)lpMsgBuf);
    env->ThrowNew(env->FindClass("NativeLibrayException"), (LPCTSTR)lpMsgBuf);
}
